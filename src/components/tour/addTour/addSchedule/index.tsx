import React, { useState, useEffect } from "react";
import { useNavigate, useParams } from "react-router-dom";
import { Form, Input, Button, InputNumber, TimePicker, message,Table  } from "antd";
import { createTourSchedule, getTourScheduleById,  } from "../../../../api/tour/index";
import dayjs from "dayjs";

const ScheduleForm = () => {
  const { tourId } = useParams(); // L·∫•y tourId t·ª´ URL
  const [form] = Form.useForm();
  const [schedules, setSchedules] = useState([]);
  const navigate = useNavigate();

  // L·∫•y danh s√°ch l·ªãch tr√¨nh theo tourId
  useEffect(() => {
    const fetchSchedules = async () => {
      try {
        const res = await getTourScheduleById(tourId);
        setSchedules(res || []);
      } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y danh s√°ch l·ªãch tr√¨nh:", error);
        message.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch l·ªãch tr√¨nh!");
      }
    };
    fetchSchedules();
  }, [tourId]);

  // H√†m x·ª≠ l√Ω th√™m l·ªãch tr√¨nh
  const handleAddSchedule = async (values: any) => {
    try {
      const scheduleData = {
        // tourId: Number(tourId), // ID tour
        dayNumber: values.dayNumber,
        location: values.location,
        stransport: values.stransport,
        activities: values.activities,
        meal: values.meal,
        arrivalTime: dayjs(values.arrivalTime).format("HH:mm:ss"),
        departureTime: dayjs(values.departureTime).format("HH:mm:ss"),
      };

      console.log("sheduleData:", scheduleData)
      const res = await createTourSchedule(tourId,scheduleData);
      console.log("resdate:",res)
      if (res) {
        message.success("‚úÖ L·ªãch tr√¨nh ƒë√£ ƒë∆∞·ª£c th√™m!");
        
        setSchedules([...schedules, res]); // C·∫≠p nh·∫≠t danh s√°ch l·ªãch tr√¨nh
        form.resetFields(); // X√≥a d·ªØ li·ªáu form sau khi th√™m
        
      }
    } catch (error) {
      console.error("‚ùå L·ªói khi th√™m l·ªãch tr√¨nh:", error);
      message.error("Kh√¥ng th·ªÉ th√™m l·ªãch tr√¨nh!");
    }
  };
  const columns = [
    {
      title: "Ng√†y s·ªë",
      dataIndex: "dayNumber",
      key: "dayNumber",
      width: 80,
    },
    {
      title: "ƒê·ªãa ƒëi·ªÉm",
      dataIndex: "location",
      key: "location",
    },
    {
      title: "Ph∆∞∆°ng ti·ªán",
      dataIndex: "stransport",
      key: "stransport",
    },
    {
      title: "Ho·∫°t ƒë·ªông",
      dataIndex: "activities",
      key: "activities",
    },
    {
      title: "B·ªØa ƒÉn",
      dataIndex: "meal",
      key: "meal",
      width: 120,
    },
    {
      title: "Gi·ªù ƒë·∫øn",
      dataIndex: "arrivalTime",
      key: "arrivalTime",
      width: 120,
    },
    {
      title: "Gi·ªù ƒëi",
      dataIndex: "departureTime",
      key: "departureTime",
      width: 120,
    },
  ];
  // H√†m ƒëi·ªÅu h∆∞·ªõng v·ªÅ trang tours
  const handleFinish = () => {
    navigate("/dashboard/tours"); // ƒêi·ªÅu h∆∞·ªõng v·ªÅ trang danh s√°ch tour
  };

  return (
    <div className="p-6 bg-white shadow-md rounded-md max-w-3xl mx-auto">
      <h2 className="text-xl font-semibold mb-4">Th√™m L·ªãch Tr√¨nh Cho Tour</h2>

      {/* Form th√™m l·ªãch tr√¨nh */}
      <Form form={form} layout="vertical" onFinish={handleAddSchedule}>
        <Form.Item name="dayNumber" label="Ng√†y s·ªë" rules={[{ required: true, message: "Nh·∫≠p ng√†y s·ªë!" }]}>
          <InputNumber className="w-full" min={1} placeholder="Nh·∫≠p s·ªë ng√†y" />
        </Form.Item>

        <Form.Item name="location" label="ƒê·ªãa ƒëi·ªÉm" rules={[{ required: true, message: "Nh·∫≠p ƒë·ªãa ƒëi·ªÉm!" }]}>
          <Input placeholder="Nh·∫≠p ƒë·ªãa ƒëi·ªÉm" />
        </Form.Item>

        <Form.Item name="stransport" label="Ph∆∞∆°ng ti·ªán" rules={[{ required: true, message: "Nh·∫≠p ph∆∞∆°ng ti·ªán!" }]}>
          <Input placeholder="Nh·∫≠p ph∆∞∆°ng ti·ªán di chuy·ªÉn" />
        </Form.Item>

        <Form.Item name="activities" label="Ho·∫°t ƒë·ªông" rules={[{ required: true, message: "Nh·∫≠p ho·∫°t ƒë·ªông!" }]}>
          <Input.TextArea rows={2} placeholder="Nh·∫≠p c√°c ho·∫°t ƒë·ªông" />
        </Form.Item>

        <Form.Item name="meal" label="B·ªØa ƒÉn" rules={[{ required: true, message: "Nh·∫≠p th√¥ng tin b·ªØa ƒÉn!" }]}>
          <Input placeholder="Nh·∫≠p b·ªØa ƒÉn (S√°ng, Tr∆∞a, T·ªëi)" />
        </Form.Item>

        <Form.Item name="arrivalTime" label="Gi·ªù ƒë·∫øn" rules={[{ required: true, message: "Ch·ªçn gi·ªù ƒë·∫øn!" }]}>
          <TimePicker className="w-full" format="HH:mm" />
        </Form.Item>

        <Form.Item name="departureTime" label="Gi·ªù ƒëi" rules={[{ required: true, message: "Ch·ªçn gi·ªù ƒëi!" }]}>
          <TimePicker className="w-full" format="HH:mm" />
        </Form.Item>

        {/* N√∫t Th√™m */}
        <Form.Item>
          <Button type="primary" htmlType="submit" className="w-full">
            Th√™m L·ªãch Tr√¨nh
          </Button>
        </Form.Item>
      </Form>

      {/* Danh s√°ch l·ªãch tr√¨nh */}
      <h3 className="text-lg font-semibold mt-6 mb-2">Danh s√°ch l·ªãch tr√¨nh</h3>
      {schedules.length > 0 ? (
      <Table
        dataSource={schedules.map((item) => ({ ...item, key: item.scheduleId }))}
        columns={columns}
        pagination={false} // Kh√¥ng ph√¢n trang
        bordered
      />
    ) : (
      <p>Ch∆∞a c√≥ l·ªãch tr√¨nh n√†o.</p>
    )}

     {/* N√∫t Ho√†n th√†nh */}
     <Button 
        type="default" 
        className="mt-4 w-full" 
        onClick={handleFinish} // üõ† G·ªçi h√†m ƒëi·ªÅu h∆∞·ªõng
      >
        Ho√†n th√†nh
      </Button>
    </div>
  );
};

export default ScheduleForm;
