import React, {useEffect, useState} from 'react';
import {getCustomers, getCustomerById, getBookingsByCustomerId,updateCustomer} from '../../../api/customer/index';
import {updateUserStatus} from '../../../api/user/index';
import {useNavigate, useParams} from 'react-router-dom';
import {notification,Button, Form, Input, Modal, Select, message} from 'antd';
const { Option } = Select;

const CustomerDetail = () => {
  const {id} = useParams();
  const navigate = useNavigate();

  const [customers, setCustomers] = useState<any[]>([]);
  const [selectedCustomer, setSelectedCustomer] = useState<any>(null);
  const [bookings, setBookings] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [isEditing, setIsEditing] = useState(false);
  const [isModalOpen, setIsModalOpen] = useState(false);
  // üéØ Kh·ªüi t·∫°o form t·ª´ hook Ant Design
  const [form] = Form.useForm();
  

  //  L·∫•y danh s√°ch kh√°ch h√†ng khi l·∫ßn ƒë·∫ßu load trang
  useEffect(() => {
    const fetchCustomers = async () => {
      const data = await getCustomers();
      if (data) setCustomers(data);
    };
    fetchCustomers();
  }, []);

  //   L·∫•y chi ti·∫øt kh√°ch h√†ng m·ªói l·∫ßn "id" thay ƒë·ªïi
  useEffect(() => {
    const fetchCustomerDetail = async () => {
      setLoading(true);
      if (id) {
        const detail = await getCustomerById(id);
        if (detail) setSelectedCustomer(detail);
        // üî• L·∫•y lu√¥n danh s√°ch tour booking c·ªßa kh√°ch h√†ng n√†y
        const bookingData = await getBookingsByCustomerId(id);
        if (bookingData) setBookings(bookingData);
        else setSelectedCustomer(null);
      }
      setLoading(false);
    };
    fetchCustomerDetail();
  }, [id]); //  ƒë·∫£m b·∫£o lu√¥n load l·∫°i khi id thay ƒë·ªïi

  //  L·∫•y th√¥ng tin chi ti·∫øt c·ªßa kh√°ch h√†ng khi click
  const handleSelectCustomer = async (id: number) => {
    const res = await getCustomerById(id);
    if (res) {
      setSelectedCustomer(res);

      // C·∫≠p nh·∫≠t form ngay khi ƒë·ªïi kh√°ch h√†ng
      form.setFieldsValue({
        fullName: res.fullName,
        address: res.address,
        dob: res.dob,
        gender: res.gender ? "true" : "false",
      });

    const bookingData = await getBookingsByCustomerId(id);
    if (bookingData) setBookings(bookingData);
    }
  };

  //  T√≠nh t·ªïng ti·ªÅn t·ª´ danh s√°ch ƒë∆°n h√†ng
  const calculateTotalPrice = () => {
    return bookings.reduce((total, booking) => total + booking.totalPrice, 0);
  };

  //  Hi·ªÉn th·ªã modal c·∫≠p nh·∫≠t
  const showModal = () => {
    setIsModalOpen(true);
  
    // Set gi√° tr·ªã m·ªõi cho form m·ªói khi m·ªü modal
    form.setFieldsValue({
      fullName: selectedCustomer.fullName,
      address: selectedCustomer.address,
      dob: selectedCustomer.dob,
      gender: selectedCustomer.gender ? "true" : "false",
    });
  };

  //  ƒê√≥ng modal
  const handleCancel = () => setIsModalOpen(false);
  //  X·ª≠ l√Ω c·∫≠p nh·∫≠t th√¥ng tin kh√°ch h√†ng
  const handleUpdateCustomer = async (values: any) => {
    try {
      // L·∫•y d·ªØ li·ªáu t·ª´ form
      const updatedData = {
        ...selectedCustomer,
        ...values, // L·∫•y gi√° tr·ªã m·ªõi t·ª´ form
        gender: values.gender === "true" // Chuy·ªÉn gender th√†nh boolean
      };
  
      console.log("D·ªØ li·ªáu c·∫≠p nh·∫≠t:", updatedData);
  
      // G·ªçi API c·∫≠p nh·∫≠t
      const res = await updateCustomer(selectedCustomer.customerId, updatedData);
  
      if (res) {
        notification.success({
          message: 'C·∫≠p nh·∫≠t th√†nh c√¥ng!',
          description: 'Th√¥ng tin kh√°ch h√†ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.',
        });
  
        const updatedCustomerList = await getCustomers();
        setCustomers(updatedCustomerList);
        // Load l·∫°i th√¥ng tin m·ªõi c·ªßa kh√°ch h√†ng
        const updatedCustomer = await getCustomerById(selectedCustomer.customerId);
        setSelectedCustomer(updatedCustomer);
  
        setIsEditing(false);
        setIsModalOpen(false);
      }
    } catch (error) {
      console.error('L·ªói c·∫≠p nh·∫≠t kh√°ch h√†ng:', error);
      notification.error({
        message: 'L·ªói',
        description: 'C·∫≠p nh·∫≠t th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i!',
      });
    }
  };
  
  const handleChangeStatus = (newStatus: string) => {
    Modal.confirm({
      title: "X√°c nh·∫≠n c·∫≠p nh·∫≠t tr·∫°ng th√°i",
      content: `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒë·ªïi tr·∫°ng th√°i kh√°ch h√†ng sang ${
        newStatus === "ACTIVE"
          ? "ƒêang ho·∫°t ƒë·ªông"
          : newStatus === "DISABLED"
          ? "ƒê√£ b·ªã v√¥ hi·ªáu h√≥a"
          : "ƒê√£ b·ªã ch·∫∑n"
      } kh√¥ng?`,
      okText: "X√°c nh·∫≠n",
      cancelText: "H·ªßy",
      async onOk() {
        try {
          console.log("userId: ", selectedCustomer.user.id);
          // G·ªçi API m·ªõi ch·ªâ ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i
          const res = await updateUserStatus(selectedCustomer.user.id, newStatus);
  
          if (res) {
            notification.success({
              message: "C·∫≠p nh·∫≠t th√†nh c√¥ng!",
              description: `Kh√°ch h√†ng ƒë√£ ƒë∆∞·ª£c ƒë·ªïi tr·∫°ng th√°i th√†nh ${
                newStatus === "ACTIVE"
                  ? "ƒêang ho·∫°t ƒë·ªông"
                  : newStatus === "DISABLED"
                  ? "ƒê√£ b·ªã v√¥ hi·ªáu h√≥a"
                  : "ƒê√£ b·ªã ch·∫∑n"
              }.`,
            });
  
            // C·∫≠p nh·∫≠t l·∫°i tr·∫°ng th√°i kh√°ch h√†ng tr√™n giao di·ªán
            const updatedCustomer = await getCustomerById(selectedCustomer.customerId);
            setSelectedCustomer(updatedCustomer);
          }
        } catch (error) {
          console.error("L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i:", error);
          notification.error({
            message: "L·ªói",
            description: "C·∫≠p nh·∫≠t tr·∫°ng th√°i th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i!",
          });
        }
      },
    });
  };
  

  if (loading) return <div className="text-center p-4">‚è≥ ƒêang t·∫£i d·ªØ li·ªáu...</div>;

  return (
    <div className="flex h-full">
      {/*  Danh s√°ch kh√°ch h√†ng b√™n tr√°i */}
      <div className="w-1/3 border-r border-gray-300 p-2 overflow-auto">
        <h2 className="text-lg font-bold mb-2"> Danh s√°ch kh√°ch h√†ng</h2>
        <table className="table-auto w-full border-collapse border border-gray-300 text-sm">
          <thead className="bg-gray-200">
            <tr>
              <th className="border p-2">T√™n</th>
              <th className="border p-2">Email</th>
            </tr>
          </thead>
          <tbody>
            {customers.map((cus) => (
              <tr
                key={cus.customerId}
                className={`cursor-pointer hover:bg-gray-200 ${
                  selectedCustomer?.customerId === cus.customerId ? 'bg-blue-100 font-bold' : ''
                }`}
                onClick={() => handleSelectCustomer(cus.customerId)}
              >
                <td className="border p-2">{cus.fullName}</td>
                <td className="border p-2">{cus.user.email}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/*  Chi ti·∫øt kh√°ch h√†ng b√™n ph·∫£i (2/3 m√†n h√¨nh) */}
      <div className="w-2/3 p-4 overflow-auto">
        {selectedCustomer ? (
          <>
          <div className="flex items-center gap-2 mb-4">
            {/* N√∫t m·ªü Modal c·∫≠p nh·∫≠t */}
          <Button type="primary" style={{ height: 40, lineHeight: '40px', marginTop:'8px' }} onClick={showModal} className="mb-2">
           C·∫≠p nh·∫≠t
          </Button>
            {/* Select tr·∫°ng th√°i */}
            <Select
              value={selectedCustomer.user.status}
              style={{
                width: 200,
                height: 42, // ƒê·∫£m b·∫£o chi·ªÅu cao kh·ªõp v·ªõi button
                lineHeight: '40px', // CƒÉn ch·ªânh ch·ªØ gi·ªØa
                color:
                  selectedCustomer.user.status === 'ACTIVE'
                    ? 'green'
                    : selectedCustomer.user.status === 'DISABLED'
                    ? 'orange'
                    : 'red',
              }}
              onChange={(value) => handleChangeStatus(value)}
            >
              <Option value="ACTIVE" style={{ color: 'green' }}>üü¢ ƒêang ho·∫°t ƒë·ªông</Option>              
              <Option value="BLOCKED" style={{ color: 'red' }}>üî¥ ƒê√£ b·ªã ch·∫∑n</Option>
              <Option value="DISABLED" style={{ color: 'orange' }}>üü° V√¥ hi·ªáu h√≥a</Option>
            </Select>
            
          </div>
          
            {/*  Th√¥ng tin chi ti·∫øt kh√°ch h√†ng */}
            <div className="p-4 mb-4 bg-blue-50 border border-blue-200 rounded-md shadow-sm">
              <div className="grid grid-cols-[120px_1fr] gap-y-2 gap-x-4 text-sm">
                <div className="font-semibold text-gray-600">H·ªç t√™n:</div>
                <div className="text-gray-800">{selectedCustomer.fullName}</div>

                <div className="font-semibold text-gray-600">Ng√†y sinh:</div>
                <div className="text-gray-800">{selectedCustomer.dob}</div>

                <div className="font-semibold text-gray-600">Email:</div>
                <div className="text-gray-800">{selectedCustomer.user.email}</div>

                <div className="font-semibold text-gray-600">ƒê·ªãa ch·ªâ:</div>
                <div className="text-gray-800">{selectedCustomer.address}</div>

                <div className="font-semibold text-gray-600">Gi·ªõi t√≠nh:</div>
                <div className="text-gray-800">{selectedCustomer.gender ? 'Nam' : 'N·ªØ'}</div>

                <div className="font-semibold text-gray-600">Tr·∫°ng th√°i:</div>
                <div
                  className={`${
                    selectedCustomer.user.status === 'ACTIVE'
                      ? 'text-green-600'
                      : selectedCustomer.user.status === 'DISABLED'
                      ? 'text-yellow-500'
                      : 'text-red-500'
                  }`}
                >
                  {selectedCustomer.user.status === 'ACTIVE'
                    ? 'ƒêang ho·∫°t ƒë·ªông'
                    : selectedCustomer.user.status === 'DISABLED'
                    ? 'ƒê√£ b·ªã v√¥ hi·ªáu h√≥a'
                    : 'ƒê√£ b·ªã ch·∫∑n'}
                </div>
              </div>          
            </div>

          {/* üéØ Modal c·∫≠p nh·∫≠t th√¥ng tin kh√°ch h√†ng */}
          <Modal
            title=" C·∫≠p nh·∫≠t th√¥ng tin kh√°ch h√†ng"
            open={isModalOpen}
            onCancel={handleCancel}
            footer={null}
          >
            <Form
              form={form}
              layout="vertical"
              onFinish={handleUpdateCustomer}
            >
              <Form.Item
                label="H·ªç t√™n"
                name="fullName"
                rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p h·ªç t√™n!" }]}
              >
                <Input />
              </Form.Item>

              <Form.Item
                label="ƒê·ªãa ch·ªâ"
                name="address"
                rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ!" }]}
              >
                <Input />
              </Form.Item>

              <Form.Item
                label="Ng√†y sinh"
                name="dob"
                rules={[{ required: true, message: "Vui l√≤ng ch·ªçn ng√†y sinh!" }]}
              >
                <Input type="date" />
              </Form.Item>

              <Form.Item
                label="Gi·ªõi t√≠nh"
                name="gender"
                rules={[{ required: true, message: "Vui l√≤ng ch·ªçn gi·ªõi t√≠nh!" }]}
              >
                <Select>
                  <Option value="true">Nam</Option>
                  <Option value="false">N·ªØ</Option>
                </Select>
              </Form.Item>

              <Form.Item className="text-right">
                <Button type="default" onClick={handleCancel} className="mr-2">
                  H·ªßy
                </Button>
                <Button type="primary" htmlType="submit">
                  L∆∞u thay ƒë·ªïi
                </Button>
              </Form.Item>
            </Form>
          </Modal>
            

            {/*  Danh s√°ch tour booking */}
            <div className="p-4 mb-4 bg-gray-50 border border-gray-200 rounded-md shadow-sm">
              <h3 className="text-xl font-bold mb-2"> Danh s√°ch tour ƒë√£ ƒë·∫∑t</h3>
              {bookings.length > 0 ? (
                <table className="table-auto w-full border-collapse border border-gray-300 text-sm">
                  <thead className="bg-gray-200">
                    <tr>
                      <th className="border p-2">Ng√†y ƒë·∫∑t</th>
                      <th className="border p-2">T√™n tour</th>
                      <th className="border p-2">S·ªë ng∆∞·ªùi</th>
                      <th className="border p-2">T·ªïng gi√°</th>
                    </tr>
                  </thead>
                  <tbody>
                    {bookings.map((booking: any, index: number) => (
                      <tr key={index} className="hover:bg-gray-100">
                        <td className="border p-2 text-center">{booking.bookingDate}</td>
                        <td className="border p-2">{booking.tour.name}</td>
                        <td className="border p-2 text-center">{booking.numberPeople}</td>
                        <td className="border p-2 text-right">{booking.totalPrice.toLocaleString()} ‚Ç´</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              ) : (
                <div className="text-center p-4 text-red-500"> Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o!</div>
              )}
            </div>

            {/*  T·ªïng ti·ªÅn */}
            <div className="p-4 bg-green-50 border border-green-200 rounded-md shadow-sm text-right">
              <p className="text-lg font-bold text-green-700">T·ªïng ti·ªÅn: {calculateTotalPrice().toLocaleString()} ‚Ç´</p>
            </div>
          </>
        ) : (
          <div className="text-center p-4 text-red-500">‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng!</div>
        )}
      </div>
    </div>
  );
};

export default CustomerDetail;
