import axios, {CustomAxiosResponse} from '../axiosConfig';
import {toast} from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:8080';

// L·∫•y danh s√°ch t·∫•t c·∫£ nh√¢n vi√™n
export const getTours = async (): Promise<CustomAxiosResponse<any> | undefined> => {
  try {
    const res = await axios.get(`${API_URL}/api/tours/tour-manage`);
    return res;
  } catch (error: any) {
    toast.error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch tour!');
    console.error('L·ªói l·∫•y danh s√°ch tour:', error);
  }
};

// Th√™m tour m·ªõi (demo nhanh)
export const createTour = async ( tourData) => {
  try {
    console.log('tour data', tourData);
    const res = await axios.post(`${API_URL}/api/tours/category`, tourData);
    toast.success('Th√™m tour m·ªõi th√†nh c√¥ng!');
    return res;
  } catch (error: any) {
    console.error('L·ªói th√™m tour:', error);
    toast.error('Kh√¥ng th·ªÉ th√™m tour m·ªõi!');
  }
};

//them tour detail
export const createTourDetail = async (tourId, tourData) => {
  try {
    // G·ªçi API POST, truy·ªÅn tourId v√†o ƒë√∫ng endpoint
    console.log('tourId', tourData);
    const res = await axios.post(`${API_URL}/api/tour-details/tour/${tourId}`, tourData);

    toast.success('Th√™m chi ti·∫øt tour th√†nh c√¥ng!');
    return res.data;
  } catch (error) {
    console.error('L·ªói th√™m chi ti·∫øt tour:', error);
    toast.error('Kh√¥ng th·ªÉ th√™m chi ti·∫øt tour!');
    return null; // Tr·∫£ v·ªÅ null n·∫øu l·ªói
  }
};

export const createTourSchedule = async (tourId, tourData) => {
  try {
    // G·ªçi API POST, truy·ªÅn tourId v√†o ƒë√∫ng endpoint
    console.log('tourId', tourData);
    const res = await axios.post(`${API_URL}/api/schedules/tour/${tourId}`, tourData);

    toast.success('Th√™m chi ti·∫øt tour th√†nh c√¥ng!');
    return res;
  } catch (error) {
    console.error('L·ªói th√™m chi ti·∫øt tour:', error);
    toast.error('Kh√¥ng th·ªÉ th√™m chi ti·∫øt tour!');
    return null; // Tr·∫£ v·ªÅ null n·∫øu l·ªói
  }
};

// L·∫•y th√¥ng tin chi ti·∫øt c·ªßa 1 tour
export const getTourById = async (id: number): Promise<CustomAxiosResponse<any> | undefined> => {
  try {
    const res = await axios.get(`${API_URL}/api/tours/${id}`);
    return res;
  } catch (error: any) {
    toast.error('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin tour!');
    console.error('L·ªói l·∫•y th√¥ng tin tour:', error);
  }
};

// L·∫•y th√¥ng tin chi ti·∫øt c·ªßa 1 tour
export const getTourDetailById = async (id: number): Promise<CustomAxiosResponse<any> | undefined> => {
  try {
    const res = await axios.get(`${API_URL}/api/tour-details/tour/${id}`);
    return res;
  } catch (error: any) {
    toast.error('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin tour detail!');
    console.error('L·ªói l·∫•y th√¥ng tin tour detail:', error);
  }
};

// L·∫•y th√¥ng tin l·ªãch tr√¨nh c·ªßa 1 tour
export const getTourScheduleById = async (id: number): Promise<CustomAxiosResponse<any> | undefined> => {
  try {
    const res = await axios.get(`${API_URL}/api/schedules/tour/${id}`);
    return res;
  } catch (error: any) {
    toast.error('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin l·ªãch tr√¨nh tour!');
    console.error('L·ªói l·∫•y th√¥ng tin l·ªãch tr√¨nh tour:', error);
  }
};

// ƒë·ªÉ t·∫°m l·∫•y category
export const getTourCategories = async () => {
  const response = await axios.get(`${API_URL}/categories`);
  return response.data;
};

// üóëÔ∏è X√≥a danh m·ª•c tour
export const deleteTour = async (id: number): Promise<void> => {
  try {
    await axios.delete(`${API_URL}/api/tour/${id}`);
    toast.success('X√≥a tour th√†nh c√¥ng!');
  } catch (error: any) {
    toast.error('Kh√¥ng th·ªÉ x√≥a tour!');
    console.error('L·ªói x√≥a :', error);
  }
};

// üóëÔ∏è X√≥a schedule
export const deleteSchedule = async (id: number): Promise<void> => {
  try {
    await axios.delete(`${API_URL}/api/schedules/${id}`);
    toast.success('X√≥a tour th√†nh c√¥ng!');
  } catch (error: any) {
    toast.error('Kh√¥ng th·ªÉ x√≥a tour!');
    console.error('L·ªói x√≥a :', error);
  }
};

//c·∫≠p nh·∫≠t tour
export const updateTour = async (id: number, data: any): Promise<CustomAxiosResponse<any> | undefined> => {
  try {
    console.log('data:', data);
    const res = await axios.put(`${API_URL}/api/tours/update/${id}`, data);
    toast.success('‚úÖ C·∫≠p nh·∫≠t tour th√†nh c√¥ng!');

    return res;
  } catch (error: any) {
    toast.error('‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tour!');
    console.error('L·ªói c·∫≠p nh·∫≠t tour:', error);
  }
};

//c·∫≠p nh·∫≠t tour detail
export const updateTourDetail = async (id: number, data: any): Promise<CustomAxiosResponse<any> | undefined> => {
  try {
    console.log('data:', data);
    const res = await axios.patch(`${API_URL}/api/tour-details/tour/${id}`, data);
    toast.success('‚úÖ C·∫≠p nh·∫≠t tour detail th√†nh c√¥ng!');

    return res;
  } catch (error: any) {
    toast.error('‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tour detail!');
    console.error('L·ªói c·∫≠p nh·∫≠t tour detail:', error);
  }
};

//c·∫≠p nh·∫≠t schedule
export const updateTourSchedule = async (id: number, data: any): Promise<CustomAxiosResponse<any> | undefined> => {
  try {
    console.log('data:', data);
    const res = await axios.patch(`${API_URL}/api/schedules/${id}`, data);
    toast.success('‚úÖ C·∫≠p nh·∫≠t tour schedule th√†nh c√¥ng!');

    return res;
  } catch (error: any) {
    toast.error('‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tour schedule!');
    console.error('L·ªói c·∫≠p nh·∫≠t tour schedule:', error);
  }
};

// Upload tour image
export const uploadTourImage = async (file) => {
  try {
    const formData = new FormData();
    formData.append('avatar', file);

    const res = await axios.post(`${API_URL}/api/tours/upload-tour`, formData, {
      headers: {'Content-Type': 'multipart/form-data'},
    });

    console.log('Upload response:', res); // üëà ki·ªÉm tra xem res.data c√≥ avatarUrl kh√¥ng

    toast.success('T·∫£i ·∫£nh l√™n th√†nh c√¥ng!');
    return {imageUrl: res.avatarUrl}; // d√πng optional chaining ƒë·ªÉ tr√°nh l·ªói
  } catch (error) {
    console.error('L·ªói t·∫£i ·∫£nh:', error);
    toast.error('Kh√¥ng th·ªÉ t·∫£i ·∫£nh l√™n!');
    throw error;
  }
};
